{*******************************************************************************

  ABF Visual Components Library

  Copyright (c) 2000-2005 ABF software, Inc.
  All Rights Reserved.

  e-mail: info@abf-dev.com
  web:    http://www.abf-dev.com

  The entire contents of this file is protected by International Copyright
Laws. Unauthorized reproduction, reverse engineering, and distribution of all
or any portion of the code contained in this file is strictly prohibited and
may result in severe civil and criminal penalties and will be prosecuted to
the maximum extent possible under the law.

  RESTRICTIONS

  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY
PORTION OF ITS CONTENTS SHALL AT NO TIME BE COPIED, TRANSFERRED, SOLD,
DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS
WRITTEN CONSENT AND PERMISSION FROM THE ABF SOFTWARE, INC.

  CONSULT THE END USER LICENSE AGREEMENT (EULA) FOR INFORMATION ON ADDITIONAL
RESTRICTIONS.

*******************************************************************************}
unit abfWABUtils;

{$I abf.inc}

interface

uses
  Windows, Classes, WabApi, WabDefs, WabIab;

{*******************************************************************************
  Units WabDefs, WabApi, WabIab, WabTags, WabCode are used in the abfWAB
product. These unints are part of the Windows Address Book (WAB) functions
interfaces, taken from <http://delphi-jedi.org> site. You can get more
information about these units and the Project JEDI at <http://delphi-jedi.org>
*******************************************************************************}

{$IFDEF C3}
(*$HPPEMIT 'typedef System::DelphiInterface<IMAPITable> _di_IMAPITable;'*)
(*$HPPEMIT 'typedef System::DelphiInterface<IMailUser> _di_IMailUser;'*)
(*$HPPEMIT 'typedef System::DelphiInterface<IDistList> _di_IDistList;'*)
(*$HPPEMIT 'typedef System::DelphiInterface<IABContainer> _di_IABContainer;'*)
(*$HPPEMIT 'typedef System::DelphiInterface<IAddrBook> _di_IAddrBook;'*)
(*$HPPEMIT 'typedef System::DelphiInterface<IMAPIAdviseSink> _di_IMAPIAdviseSink;'*)
(*$HPPEMIT 'typedef System::DelphiInterface<IWABObject> _di_IWabObject;'*)
(*$HPPEMIT 'typedef LPWABOPEN TWABOpen;'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfNewSBinary(LPSBinary &P, unsigned Size);'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfNewSBinary2(const _di_IWabObject AWabObject, LPSBinary &P, unsigned Size);'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfFreeSBinary(LPSBinary &P);'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfFreeSBinary2(const _di_IWabObject AWabObject, LPSBinary &P);'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfMoveSBinary(const LPSBinary Source, LPSBinary &Dest);'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfMoveSBinary2(const _di_IWabObject AWabObject, const LPSBinary Source, LPSBinary &Dest);'*)
(*$HPPEMIT 'extern PACKAGE AnsiString __fastcall abfEntryIDToString(LPSBinary P);'*)
(*$HPPEMIT 'extern PACKAGE LPSBinary __fastcall abfStringToEntryID(AnsiString IdString);'*)
(*$HPPEMIT 'extern PACKAGE bool __fastcall abfIsEmptyEntryID(const LPSBinary P);'*)
(*$HPPEMIT 'extern PACKAGE bool __fastcall abfIfPropExists(const LPSPropValue PropValue);'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfCopyWABStringsArray(const LPSPropValue PropValue);'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfFreeMVbinArray(const _di_IWabObject AWabObject, LPENTRYLIST &AArray);'*)
(*$HPPEMIT 'extern PACKAGE bool __fastcall abfReplaceMVbinArray(const _di_IWabObject AWabObject, const LPENTRYLIST ASrcArray, LPENTRYLIST &ADestArray);'*)
(*$HPPEMIT 'extern PACKAGE bool __fastcall abfIsEqualSBinaryValues(const LPSBinary AValue1, const LPSBinary AValue2);'*)
(*$HPPEMIT 'extern PACKAGE bool __fastcall abfIfSBinaryExistsInArray(const LPSBinary AValue, const LPENTRYLIST AArray);'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfFreeSRowSet(const _di_IWabObject AWabObject, LPSRowSet &P);'*)
(*$HPPEMIT 'extern PACKAGE void __fastcall abfFreePAdrList(const _di_IWabObject AWabObject, LPADRLIST &P);'*)
{$ENDIF}

  procedure abfNewSBinary(var P: PSBinary; Size: ULONG);
  {$IfDef C3}{$EXTERNALSYM abfNewSBinary}{$EndIf C3}
  procedure abfNewSBinary2(const AWabObject: IWabObject;
    var P: PSBinary; Size: ULONG);
  {$IfDef C3}{$EXTERNALSYM abfNewSBinary2}{$EndIf C3}
  procedure abfFreeSBinary(var P: PSBinary);
  {$IfDef C3}{$EXTERNALSYM abfFreeSBinary}{$EndIf C3}
  procedure abfFreeSBinary2(const AWabObject: IWabObject; var P: PSBinary);
  {$IfDef C3}{$EXTERNALSYM abfFreeSBinary2}{$EndIf C3}  
  procedure abfMoveSBinary(const Source: PSBinary; var Dest: PSBinary);
  {$IfDef C3}{$EXTERNALSYM abfMoveSBinary}{$EndIf C3}
  procedure abfMoveSBinary2(const AWabObject: IWabObject;
    const Source: PSBinary; var Dest: PSBinary);
  {$IfDef C3}{$EXTERNALSYM abfMoveSBinary2}{$EndIf C3}
  function abfEntryIDToString(P: PSBinary): string;
  {$IfDef C3}{$EXTERNALSYM abfEntryIDToString}{$EndIf C3}
  function abfStringToEntryID(IdString: string): PSBinary;
  {$IfDef C3}{$EXTERNALSYM abfStringToEntryID}{$EndIf C3}
  function abfIsEmptyEntryID(const P: PSBinary): Boolean;
  {$IfDef C3}{$EXTERNALSYM abfIsEmptyEntryID}{$EndIf C3}
  function abfIfWABPropExists(const PropValue: TSPropValue): Boolean;
  {$IfDef C3}{$EXTERNALSYM abfIfWABPropExists}{$EndIf C3}
  procedure abfCopyWABStringsArray(const PropValue: TSPropValue;
    const AStrings: TStrings);
  {$IfDef C3}{$EXTERNALSYM abfCopyWABStringsArray}{$EndIf C3}
  procedure abfFreeMVbinArray(const AWabObject: IWabObject;
    var AArray: PSBinaryArray);
  {$IfDef C3}{$EXTERNALSYM abfFreeMVbinArray}{$EndIf C3}
  function abfReplaceMVbinArray(const AWabObject: IWabObject;
    const ASrcArray: TSBinaryArray; var ADestArray: TSBinaryArray): Boolean;
  {$IfDef C3}{$EXTERNALSYM abfReplaceMVbinArray}{$EndIf C3}
  function abfIsEqualSBinaryValues(const AValue1, AValue2: PSBinary): Boolean;
  {$IfDef C3}{$EXTERNALSYM abfIsEqualSBinaryValues}{$EndIf C3}
  function abfIfSBinaryExistsInArray(const AValue: PSBinary;
    const AArray: TSBinaryArray): Boolean;
  {$IfDef C3}{$EXTERNALSYM abfIfSBinaryExistsInArray}{$EndIf C3}

  function abfCombineMVbinArrays(const AWabObject: IWabObject;
    const AArray1, AArray2: TSBinaryArray;
    var AResultArray: TSBinaryArray): Boolean;

  function abfGetWABVersion(var Version: string): Boolean;
  function abfGetWabDllPath(var WABDllPath: string): Boolean;
  function abfGetLastUserIdentityGUID(var GUIDString: string): Boolean;
  function abfIsOutlookSharedMode: Boolean;
  function abfSetOutlookSharedMode(Value: Boolean): Boolean;
  function abfGetRefCountWABDll: DWORD;
  function abfIncRefCountWABDll: DWORD;
  function abfDecRefCountWABDll: DWORD;
  procedure abfFreeSRowSet(const AWabObject: IWabObject; var P: PSRowSet);
  {$IfDef C3}{$EXTERNALSYM abfFreeSRowSet}{$EndIf C3}
  procedure abfFreePAdrList(const AWabObject: IWabObject; var P: PAdrList);
  {$IfDef C3}{$EXTERNALSYM abfFreePAdrList}{$EndIf C3}

{******************************************************************************}
implementation
