{*******************************************************************************

  ABF Visual Components Library

  Copyright (c) 2000-2005 ABF software, Inc.
  All Rights Reserved.

  e-mail: info@abf-dev.com
  web:    http://www.abf-dev.com

  The entire contents of this file is protected by International Copyright
Laws. Unauthorized reproduction, reverse engineering, and distribution of all
or any portion of the code contained in this file is strictly prohibited and
may result in severe civil and criminal penalties and will be prosecuted to
the maximum extent possible under the law.

  RESTRICTIONS

  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY
PORTION OF ITS CONTENTS SHALL AT NO TIME BE COPIED, TRANSFERRED, SOLD,
DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS
WRITTEN CONSENT AND PERMISSION FROM THE ABF SOFTWARE, INC.

  CONSULT THE END USER LICENSE AGREEMENT (EULA) FOR INFORMATION ON ADDITIONAL
RESTRICTIONS.

*******************************************************************************}
unit abfComponents;

{$I abf.inc}

interface

uses
{$IfDef D4}
  ImgList,
{$EndIf D4}
  Windows, Messages, SysUtils, Classes, Controls, Graphics, Menus, ShellApi,
  Forms,
// ABF VCL  
  abfClasses, abfSysUtils, abfVclUtils;

const
  WM_TRAYICONNOTIFY = WM_USER + 211;

{$IfDef C3}{$EXTERNALSYM NIF_INFO}{$EndIf C3}
  NIF_INFO             = $00000010;
{$IfDef C3}{$EXTERNALSYM NIN_BALLOONSHOW}{$EndIf C3}
  NIN_BALLOONSHOW      = WM_USER + 2;
{$IfDef C3}{$EXTERNALSYM NIN_BALLOONTIMEOUT}{$EndIf C3}
  NIN_BALLOONTIMEOUT   = WM_USER + 4;
{$IfDef C3}{$EXTERNALSYM NIN_BALLOONUSERCLICK}{$EndIf C3}
  NIN_BALLOONUSERCLICK = WM_USER + 5;

{$IfNDef D3}
  PROCESS_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or $FFF);
{$EndIf D3}

type

//==============================================================================
// TabfComponent
//==============================================================================
// Base class of all non-visual TabfXXX components. Provides About propery.

  TabfComponent = class(TComponent)
  private
    FAbout: string;
  protected
    property About: string read FAbout write FAbout stored False;
  end;


//==============================================================================
// TabfCustomThreadComponent
//==============================================================================
// TabfCustomThreadComponent is a base type of all components that has own
// thread.

  TabfThreadMethodEx = procedure(Data: Pointer) of object;

  TabfCustomThreadComponent = class(TabfComponent)
  private
    FPriority: TThreadPriority;
    FReturnValue: Integer;
    FSuspended, FSynchronized: Boolean;
    FOnExecute, FOnException, FOnTerminate, FOnFinish: TNotifyEvent;
    procedure InternalSynchronizeEx;
  // Properties Get/Set
    function  GetHandle: THandle;
    function  GetPriority: TThreadPriority;
    procedure SetPriority(Value: TThreadPriority);
    function  GetReturnValue: Integer;
    procedure SetReturnValue(Value: Integer);
    function  GetSuspended: Boolean;
    procedure SetSuspended(Value: Boolean);
    function  GetSynchronized: Boolean;
    procedure SetSynchronized(Value: Boolean);
    function  GetTerminated: Boolean;
    function  GetThreadID: THandle;
    function  GetOnTerminate: TNotifyEvent;
    procedure SetOnTerminate(Value: TNotifyEvent);
    function GetOnFinish: TNotifyEvent;
    procedure SetOnFinish(const Value: TNotifyEvent);
  protected
    FThread: TabfEventThread;
    FSyncMethod: TabfThreadMethodEx;
    FSyncData: Pointer;
    procedure Loaded; override;
    procedure DoExecute(Sender: TObject); virtual;
    procedure DoException(Data: Pointer); virtual;
  // Events
    property OnException: TNotifyEvent read FOnException write FOnException;
    property OnTerminate: TNotifyEvent read GetOnTerminate write SetOnTerminate;
    property OnFinish: TNotifyEvent read GetOnFinish write SetOnFinish;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure CreateThread; virtual;
  // Execution routines
    procedure Execute; virtual;
    procedure Synchronize(Method: TThreadMethod); virtual;
    procedure SynchronizeEx(Method: TabfThreadMethodEx; Data: Pointer); virtual;
  // Thread routines
    procedure Suspend;
    procedure Resume;
    procedure Terminate;
    procedure TerminateHard;
    function TerminateWaitFor: Integer;
    function WaitFor: Integer;
  // Properties
    property Handle: THandle read GetHandle;
    property Priority: TThreadPriority read GetPriority write SetPriority
      default tpNormal;
    property ReturnValue: Integer read GetReturnValue write SetReturnValue
      default 0;
    property Suspended: Boolean read GetSuspended write SetSuspended
      default True;
    property Synchronized: Boolean read GetSynchronized write SetSynchronized
      default False;
    property Terminated: Boolean read GetTerminated;
    property Thread: TabfEventThread read FThread;
    property ThreadID: THandle read GetThreadID;
  // Events
    property OnExecute: TNotifyEvent read FOnExecute write FOnExecute;
  end;{TabfCustomThreadComponent = class(TabfComponent)}


//==============================================================================
// TabfThreadComponent
//==============================================================================
// TabfThreadComponent is an incapsulation of the tread for easy usage.

  TabfThreadComponent = class(TabfCustomThreadComponent)
  published
  // Properties
    property About;
    property Priority;
    property ReturnValue;
    property Suspended;
    property Synchronized;
  // Events
    property OnException;
    property OnExecute;
    property OnTerminate;
    property OnFinish;
  end;


//==============================================================================
// TabfCustomThreadTimer
//==============================================================================
// TabfCustomThreadTimer is a base type of all threaded timers.

  TabfCustomThreadTimer = class(TabfCustomThreadComponent)
  private
    FInterval: Cardinal;
    function  GetEnabled: Boolean;
    procedure SetEnabled(Value: Boolean);
    function  GetInterval: Cardinal;
    procedure SetInterval(Value: Cardinal);
    function  GetOnTimer: TNotifyEvent;
    procedure SetOnTimer(Value: TNotifyEvent);
    function  GetThread: TabfTimerThread;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure CreateThread; override;
  // Properties
    property Interval: Cardinal read GetInterval write SetInterval default 1000;
    property Enabled: Boolean read GetEnabled write SetEnabled default False;
    property Thread: TabfTimerThread read GetThread;
  // Events
    property OnTimer: TNotifyEvent read GetOnTimer write SetOnTimer;
  end;


//==============================================================================
// TabfThreadTimer
//==============================================================================
// TabfThreadTimer is a treaded timer component. Same to the TTimer, but uses
// thread, so it is more precision.

  TabfThreadTimer = class(TabfCustomThreadTimer)
  published
  // Properties
    property About;
    property Interval;
    property Priority;
    property Synchronized;
  // Events
    property OnTimer;
  // Properties
    property Enabled; // Should be the last
  end;


//==============================================================================
// TabfCustomTimer
//==============================================================================
// TabfCustomTimer is a base type of all components that contains internal
// timer.

  TabfCustomTimer = class(TabfComponent)
  private
    FInterval: Cardinal;
    FOnTimer: TNotifyEvent;
    FEnabled: Boolean;
    procedure UpdateTimer;
    procedure SetEnabled(A: Boolean);
    procedure SetInterval(A: Cardinal);
    procedure SetOnTimer(A: TNotifyEvent);
  protected
    FHandle: THandle;
    procedure WndProc(var Message: TMessage); virtual;
    procedure Timer; dynamic;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  // Properties
    property Handle: THandle read FHandle;
    property Enabled: Boolean read FEnabled write SetEnabled default True;
    property Interval: Cardinal read FInterval write SetInterval default 1000;
  // Events
    property OnTimer: TNotifyEvent read FOnTimer write SetOnTimer;
  end;{TabfCustomTimer = class(TabfComponent)}


//==============================================================================
// TabfCustomWndProcHook
//==============================================================================
// Use TabfCustomWndProcHook component or its descendants to hook a WndProc of
// the control specified in the WinControl property. If no WinControl specified,
// the form where the component is placed will be hooked. Also you can use
// the Handle property to hook any window by its handle.

  TabfCustomWndProcHook = class(TabfComponent)
  private
    FOnChangeHandle: TNotifyEvent;
    FOnChangeWinControl: TNotifyEvent;
    FOnMessageAfter: TabfMessageEvent;
    FOnMessageBefore: TabfMessageEvent;
  protected
    FActive: Boolean;
    FAutoDrag: Boolean;
    FHandle: THandle;
    FWinControl: TWinControl;
    FOldWndProc, FNewWndProc: Pointer;
    procedure Loaded; override;
    procedure Notification(AComponent: TComponent;
      Operation: TOperation); override;
  // Hook routines
    procedure Hook; virtual;
    procedure UnHook; virtual;
    procedure WndProc(var Message: TMessage); virtual;
  // Properties Get/Set
    procedure SetActive(A: Boolean); virtual;
    function  GetHandle: THandle; virtual;
    procedure SetHandle(A: THandle); virtual;
    function  GetWinControl: TWinControl; virtual;
    procedure SetWinControl(const A: TWinControl); virtual;
  // Properties
    property AutoDrag: Boolean read FAutoDrag write FAutoDrag default False;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  // Properties
    property Active: Boolean read FActive write SetActive default False;
    property Handle: THandle read GetHandle write SetHandle;
    property WinControl: TWinControl read GetWinControl write SetWinControl;
  // Events
    property OnChangeHandle: TNotifyEvent read FOnChangeHandle
      write FOnChangeHandle;
    property OnChangeWinControl: TNotifyEvent read FOnChangeWinControl
      write FOnChangeWinControl;
    property OnMessageAfter: TabfMessageEvent read FOnMessageAfter
      write FOnMessageAfter;
    property OnMessageBefore: TabfMessageEvent read FOnMessageBefore
      write FOnMessageBefore;
  end;{TabfCustomWndProcHook = class(TabfComponent)}


//==============================================================================
// TabfWndProcHook
//==============================================================================
// Descendant of the TabfCustomWndProcHook component. Has published properties,
// so it can be used at design-time.

  TabfWndProcHook = class(TabfCustomWndProcHook)
  published
  // Properties
    property About;
    property Active;
    property AutoDrag;
    property WinControl;
  // Events
    property OnChangeHandle;
    property OnChangeWinControl;
    property OnMessageAfter;
    property OnMessageBefore;
  end;


//==============================================================================
//  TabfFileOperation
//==============================================================================
// TabfFileOperation is a component that provides an easy way to perform
// different operations with files. Allows to copy, move, delete and other file
// operations.

  TabfFileOperationType = (fotCopy, fotDelete, fotMove, fotRename);
  TabfFileOperationFlag = (fofAllowUndo, fofFilesOnly, fofNoConfirmation,
    fofNoConfirmMkDir, fofNoErrorUI, fofRenameCollision, fofSilent,
    fofSimpleProgress);
  TabfFileOperationFlags = set of TabfFileOperationFlag;
  TabfFileOperationEvent = procedure(Sender: TObject; const S: string;
    var Handled: Boolean) of object;

  TabfFileOperation = class(TabfComponent)
  private
    FFileList: TStrings;
    FDestFolder: string;
    FProgressTitle: string;
    FOperation: TabfFileOperationType;
    FOptions: TabfFileOperationFlags;
    FOnError: TabfFileOperationEvent;
    procedure SetFileList(const A: TStrings);
  protected
    function ExecuteOperation(
      OperationType: TabfFileOperationType): Boolean; virtual;
    function GetSystemError(ErrorCode: Integer): string; virtual;
    function Error(const S: string): Boolean; virtual;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    function Copy: Boolean;
    function Delete: Boolean;
    function Execute: Boolean; virtual;
    function Move: Boolean;
    function Rename: Boolean;
  published
  // Properties
    property About;
    property FileList: TStrings read FFileList write SetFileList;
    property DestFolder: string read FDestFolder write FDestFolder;
    property ProgressTitle: string read FProgressTitle write FProgressTitle;
    property Operation: TabfFileOperationType read FOperation write FOperation
      default fotCopy;
    property Options: TabfFileOperationFlags read FOptions write FOptions
      default [fofAllowUndo, fofFilesOnly, fofRenameCollision];
  // Events
    property OnError: TabfFileOperationEvent read FOnError write FOnError;
  end;{TabfFileOperation = class(TabfComponent)}

  
//==============================================================================
// TabfFileAssociation
//==============================================================================
// Component allows read and write file association data.

  TabfFileAssociation = class(TabfComponent)
  private
    FExtension: string;
    FExtDescription: string;
    FFileDescription: string;
    FIconFile: string;
    FIconIndex: Integer;
    FOpenCommand: TFileName;
    FOpenCommandDescription: string;
    FOpenNewCommand: TFileName;
    FOpenNewCommandDescription: string;
    FEditCommand: TFileName;
    FEditCommandDescription: string;
    FPrintCommand: TFileName;
    FPrintCommandDescription: string;
    FPrintToCommand: TFileName;
    FPrintToCommandDescription: string;
  // Properties Get/Set
    procedure SetExtension(const Value: string);
    procedure SetExtDescription(const Value: string);
    procedure SetFileDescription(const Value: string);
    procedure SetIcon(const Value: TIcon);
    procedure SetIconFile(const Value: string);
    procedure SetIconIndex(const Value: Integer);
    procedure SetOpenCommand(const Value: TFileName);
    procedure SetOpenCommandDescription(const Value: string);
    procedure SetOpenNewCommand(const Value: TFileName);
    procedure SetOpenNewCommandDescription(const Value: string);
    procedure SetEditCommand(const Value: TFileName);
    procedure SetEditCommandDescription(const Value: string);
    procedure SetPrintCommand(const Value: TFileName);
    procedure SetPrintCommandDescription(const Value: string);
    procedure SetPrintToCommand(const Value: TFileName);
    procedure SetPrintToCommandDescription(const Value: string);
  protected
    FLargeIcon: TIcon;
    FSmallIcon: TIcon;
    FReadOnly: Boolean;
    function ChangingAllowed: Boolean;
    procedure FixExtension;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    function ReadAssociation: Boolean; virtual;
    function WriteAssociation: Boolean; virtual;
    function DeleteAssociation: Boolean; virtual;
    procedure UpdateAssociation; virtual;
  published
    property About;
    property Extension: string read FExtension write SetExtension;
    property ExtDescription: string read FExtDescription write SetExtDescription;
    property FileDescription: string read FFileDescription write SetFileDescription;
    property IconFile: string read FIconFile write SetIconFile;
    property IconIndex: Integer read FIconIndex write SetIconIndex default 0;
    property LargeIcon: TIcon read FLargeIcon write SetIcon;
    property ReadOnly: Boolean read FReadOnly write FReadOnly default True;
    property SmallIcon: TIcon read FSmallIcon write SetIcon;
    property OpenCommand: TFileName read FOpenCommand write SetOpenCommand;
    property OpenCommandDescription: string read FOpenCommandDescription
      write SetOpenCommandDescription;
    property OpenNewCommand: TFileName read FOpenNewCommand write SetOpenNewCommand;
    property OpenNewCommandDescription: string read FOpenNewCommandDescription
      write SetOpenNewCommandDescription;
    property EditCommand: TFileName read FEditCommand write SetEditCommand;
    property EditCommandDescription: string read FEditCommandDescription
      write SetEditCommandDescription;
    property PrintCommand: TFileName read FPrintCommand write SetPrintCommand;
    property PrintCommandDescription: string read FPrintCommandDescription
      write SetPrintCommandDescription;
    property PrintToCommand: TFileName read FPrintToCommand write SetPrintToCommand;
    property PrintToCommandDescription: string read FPrintToCommandDescription
      write SetPrintToCommandDescription;
  end;


//==============================================================================
// TabfCustomFileStorage
//==============================================================================
// A prototype of components that can store a file data into the *.dfm resource
// of the form where the component is placed.

  EabfFileStorage = class(Exception);

  TabfFileStorageOnFileOperation = procedure(Sender: TObject;
    Successful: Boolean) of object;
  TabfFileStorageOnConfirmOverride = procedure(Sender: TObject;
    var OverrideFile: Boolean) of object;

  TabfCustomFileStorage = class(TabfComponent)
  private
    FOnLoad: TabfFileStorageOnFileOperation;
    FOnSave: TabfFileStorageOnFileOperation;
    FOnConfirmOverride: TabfFileStorageOnConfirmOverride;
  // Properties Get/Set
    procedure SetSaveName(const Value: TFileName);
  protected
    FFileDataStream: TStream;
    FAutoSave: Boolean;
    FDataSize: LongWord;
    FFileName: TFileName;
    FSaveName: TFileName;
    procedure Loaded; override;
  // File operations
    function LoadFrom(const AFileName: string): Boolean; virtual;
    function SaveTo(const AFileName: string): Boolean; virtual;
    procedure Load; virtual;
    procedure Save; virtual;
  // Streaming routines
    procedure DefineProperties(Filer: TFiler); override;
    procedure ReadFileData(Stream: TStream); virtual;
    procedure WriteFileData(Stream: TStream); virtual;
  // Properties Get/Set
    procedure SetAutoSave(Value: Boolean); virtual;
    procedure SetFileName(const Value: TFileName); virtual;
    function  GetDataSize: LongWord; virtual;
    procedure SetDataSize(Value: LongWord); virtual;
  // Properties
    property SaveName: TFileName read FSaveName write SetSaveName;
    property AutoSave: Boolean read FAutoSave write SetAutoSave default False;
  // Events
    property OnLoad: TabfFileStorageOnFileOperation read FOnLoad write FOnLoad;
    property OnSave: TabfFileStorageOnFileOperation read FOnSave write FOnSave;
    property OnConfirmOverride: TabfFileStorageOnConfirmOverride
      read FOnConfirmOverride write FOnConfirmOverride;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
  // File operations
    procedure Clear; virtual;
  // Properties
    property DataSize: LongWord read GetDataSize write SetDataSize stored False;
    property FileName: TFileName read FFileName write SetFileName;
  end;{TabfCustomFileStorage = class(TabfComponent)}


//==============================================================================
// TabfFileStorage
//==============================================================================
// A component that can store a file into a *.dfm resource of the form where
// the component is placed.

  TabfFileStorage = class(TabfCustomFileStorage)
  public
    function LoadFrom(const AFileName: string): Boolean; override;
    function SaveTo(const AFileName: string): Boolean; override;
    procedure Load; override;
    procedure Save; override;
  published
  // Properties
    property About;
    property SaveName;
    property FileName;
    property DataSize;
    property AutoSave; // Should be read last
  // Events
    property OnLoad;
    property OnSave;
    property OnConfirmOverride;
  end;


//==============================================================================
// TabfStartButtonProperties
//==============================================================================
// Component that allows to get or set some parameters of the Window's Start
// Button

  TabfStartButtonProperties = class(TabfComponent)
  private
    FHeight: Integer;
    FTop: Integer;
    FWidth: Integer;
    FLeft: Integer;
  // Properties Get/Set
    function  GetBoundsRect: TRect;
    procedure SetBoundsRect(const A: TRect);
    function  GetLeft: Integer;
    procedure SetLeft(A: Integer);
    function  GetTop: Integer;
    procedure SetTop(A: Integer);
    function  GetWidth: Integer;
    procedure SetWidth(A: Integer);
    function  GetHeight: Integer;
    procedure SetHeight(A: Integer);
    function  GetCaption: string;
    procedure SetCaption(const A: string);
    function  GetEnabled: Boolean;
    procedure SetEnabled(A: Boolean);
    function  GetVisible: Boolean;
    procedure SetVisible(A: Boolean);
  protected
    FHandle: THandle;
    procedure UpdateBounds; virtual;
    procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer); virtual;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  // Properties
    property Handle: THandle read FHandle;
    property BoundsRect: TRect read GetBoundsRect write SetBoundsRect;
    property Caption: string read GetCaption write SetCaption;
  published
    property About;
    property ButtonLeft: Integer read GetLeft write SetLeft;
    property ButtonTop: Integer read GetTop write SetTop;
    property ButtonWidth: Integer read GetWidth write SetWidth;
    property ButtonHeight: Integer read GetHeight write SetHeight;
    property Enabled: Boolean read GetEnabled write SetEnabled default True;
    property Visible: Boolean read GetVisible write SetVisible default True;
  end;{TabfStartButtonProperties = class(TabfComponent)}


//==============================================================================
// TabfColorPicker
//==============================================================================
// Allows to get a color value of the pixel under cursor.

  TabfColorPicker = class(TabfCustomTimer)
  private
    FCursor: TCursor;
  protected
    procedure Timer; override;
    procedure UpdateCursor; virtual;
    function  GetColor: TColor; virtual;
    procedure SetCursor(A: TCursor); virtual;
  public
    constructor Create(AOwner: TComponent); override;
    property Color: TColor read GetColor;
    property Cursor: TCursor read FCursor write SetCursor default crDefault;
  published
    property About;
    property Enabled;
    property Interval default 100;
    property OnTimer;
  end;{TabfColorPicker = class(TabfCustomTimer)}


//==============================================================================
// TabfTrayIcon
//==============================================================================
// Component for working with the system tray. Allows to add or remove the icon,
// provides icon messages support. Has an engine to create the icon animated.

  TabfNotifyIconDataVer4 = packed record
    cbSize: DWORD;
    Wnd: HWND;
    uID: UINT;
    uFlags: UINT;
    uCallbackMessage: UINT;
    hIcon: HICON;
    szTip: array [0..63] of AnsiChar;
  end;

  TabfNotifyIconDataVer5 = packed record
    cbSize: DWORD;
    Wnd: HWND;
    uID: UINT;
    uFlags: UINT;
    uCallbackMessage: UINT;
    hIcon: HICON;
    szTip: array [0..127] of AnsiChar;
    dwState: DWORD;
    dwStateMask: DWORD;
    szInfo: array[0..255] of AnsiChar;
    uTimeoutOrVersion: UINT;
    szInfoTitle: array [0..63] of AnsiChar;
    dwInfoFlags: DWORD;
// Guid
  end;

  TabfNotifyIconData = TabfNotifyIconDataVer5;

  EabfTrayIcon = class(Exception);

  TabfTrayIconInfoType = (tiiNone, tiiInfo, tiiWarning, tiiError);

  TabfTrayIcon = class(TabfCustomTimer)
  private
    FEnabled: Boolean;
    FHint: string;
    FIcon: TIcon;
    FIconFlags: Integer;
    FIconID: Integer;
    FImageList: TImageList;
    FImageIndex: TImageIndex;
    FImageListChangeLink: TChangeLink;
    FMinimizeOnStart: Boolean;
    FMinimizeToTray: Boolean;
    FPopupMenu: TPopupMenu;
    FPopupByLeft: Boolean;
    FPressed: Boolean;
    FShowHint: Boolean;
    FVisible: Boolean;
  // Event fields
    FOnMinimize: TNotifyEvent;
    FOnMouseMove: TMouseMoveEvent;
    FOnMouseDown: TMouseEvent;
    FOnMouseUp: TMouseEvent;
    FOnClick: TNotifyEvent;
    FOnDblClick: TNotifyEvent;
    FOnPopupMenu: TNotifyEvent;
    FOnShow: TNotifyEvent;
    FOnHide: TNotifyEvent;
    FOnCycleIcons: TNotifyEvent;
    FVisibleOnDesigning: Boolean;
    FInfoTimeOut: Integer;
    FInfoText: string;
    FInfoTitle: string;
    FInfoType: TabfTrayIconInfoType;
    FOnBalloonTimeout: TNotifyEvent;
    FOnBalloonShow: TNotifyEvent;
    FOnBalloonClick: TNotifyEvent;
  // Misc
    procedure InsertToTray;
    procedure DeleteFromTray;
    procedure SetIconByImageIndex;
    function  IsIconStored: Boolean;
    procedure DummyOnTimer(Sender: TObject);
    procedure ImageListChange(Sender: TObject);
  // Properties Get/Set
    function  GetCycleIcons: Boolean;
    procedure SetCycleIcons(A: Boolean);
    function  GetCycleInterval: Cardinal;
    procedure SetCycleInterval(A: Cardinal);
    procedure SetEnabled(A: Boolean);
    procedure SetHint(const A: string);
    procedure SetIcon(const A: TIcon);
    procedure SetIconID(A: Integer);
    procedure SetImageList(const A: TImageList);
    procedure SetImageIndex(A: TImageIndex);
    procedure SetShowHint(A: Boolean);
    procedure SetPopupMenu(const A: TPopupMenu);
    procedure SetVisible(A: Boolean);
    procedure SetVisibleOnDesigning(A: Boolean);
    procedure SetInfoText(const Value: string);
    procedure SetInfoTitle(const Value: string);
    procedure SetInfoTimeOut(Value: Integer);
    procedure SetInfoType(Value: TabfTrayIconInfoType);
  protected
    FNotifyIconData: TabfNotifyIconData;
    OldAppProc, NewAppProc: Pointer;
    procedure Notification(AComponent: TComponent;
      Operation: TOperation); override;
    procedure Loaded; override;
    procedure Timer; override;
    procedure WndProc(var Message: TMessage); override;
  // Taskbar routines
    procedure PrepareNotifyIconData; virtual;
  // Hook routines
    procedure HookApp;
    procedure UnhookApp;
    procedure HookAppProc(var Message: TMessage); virtual;
  // Events handlers
    procedure MouseMove(Shift: TShiftState; X, Y: Integer); dynamic;
    procedure MouseDown(Button: TMouseButton; Shift: TShiftState;
      X, Y: Integer); dynamic;
    procedure MouseUp(Button: TMouseButton; Shift: TShiftState;
      X, Y: Integer); dynamic;
    procedure Click;  dynamic;
    procedure DblClick; dynamic;
    procedure DoMinimize; dynamic;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  // Actions
    procedure Update; virtual;
    procedure Show; virtual;
    procedure Hide; virtual;
    procedure ShowPopup; virtual;
    procedure ShowMainForm; virtual;
    procedure HideMainForm; virtual;
  // Extended info
    procedure ShowInfo; virtual;
    procedure ShowCustomInfo(AType: TabfTrayIconInfoType; const ATitle,
      AText: string);
    procedure ShowBalloon; virtual; // Alias
  published
  // Properties
    property About;
    property CycleIcons: Boolean read GetCycleIcons write SetCycleIcons
      default False;
    property CycleInterval: Cardinal read GetCycleInterval
      write SetCycleInterval default 200;
    property Enabled: Boolean read FEnabled write SetEnabled default True;
    property Hint: string read FHint write SetHint;
    property Icon: TIcon read FIcon write SetIcon stored IsIconStored;
    property ImageList: TImageList read FImageList write SetImageList;
    property ImageIndex: TImageIndex read FImageIndex write SetImageIndex
      default 0;
    property IconID: Integer read FIconID write SetIconID default 0;
    property MinimizeToTray: Boolean read FMinimizeToTray write FMinimizeToTray
      default False;
    property MinimizeOnStart: Boolean read FMinimizeOnStart
      write FMinimizeOnStart default False; // Is MainForm minimized on startup
    property PopupMenu: TPopupMenu read FPopupMenu write SetPopupMenu;
    property PopupByLeft: Boolean read FPopupByLeft write FPopupByLeft
      default False; // Is popup menu shown by left click
    property ShowHint: Boolean read FShowHint write SetShowHint default True;
    property Visible: Boolean read FVisible write SetVisible default False;
    property VisibleOnDesigning: Boolean read FVisibleOnDesigning
      write SetVisibleOnDesigning default False;
    // Extended info
    property InfoText: string read FInfoText write SetInfoText;
    property InfoTitle: string read FInfoTitle write SetInfoTitle;
    property InfoTimeout: Integer read FInfoTimeOut write SetInfoTimeOut
      default 10000;
    property InfoType: TabfTrayIconInfoType read FInfoType write SetInfoType
      default tiiNone;
  // Events
    property OnMinimize: TNotifyEvent read FOnMinimize write FOnMinimize;
    property OnMouseMove: TMouseMoveEvent read FOnMouseMove write FOnMouseMove;
    property OnMouseDown: TMouseEvent read FOnMouseDown write FOnMouseDown;
    property OnMouseUp: TMouseEvent read FOnMouseUp write FOnMouseUp;
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TNotifyEvent read FOnDblClick write FOnDblClick;
    property OnPopupMenu: TNotifyEvent read FOnPopupMenu write FOnPopupMenu;
    property OnShow: TNotifyEvent read FOnShow write FOnShow;
    property OnHide: TNotifyEvent read FOnHide write FOnHide;
    property OnCycleIcons: TNotifyEvent read FOnCycleIcons write FOnCycleIcons;
    property OnBalloonShow: TNotifyEvent read FOnBalloonShow
      write FOnBalloonShow;
    property OnBalloonTimeout: TNotifyEvent read FOnBalloonTimeout
      write FOnBalloonTimeout;
    property OnBalloonClick: TNotifyEvent read FOnBalloonClick
      write FOnBalloonClick;
  end;{TabfTrayIcon = class(TabfCustomTimer)}


//==============================================================================
// TabfOneInstance
//==============================================================================
// Component allows easily create applications that have only one running copy
// at the same time.  Simple drop TabfOneInstance onto any form of application
// or create it at run-time and your can prevent the second application start.
// Applications are separated by Application.Title or Application.ExeName

  TabfOneInstanceShowMessage = procedure(Sender: TObject;
    var Terminate: Boolean) of object;

  TabfOneInstance = class(TabfComponent)
  private
    FActivatePrevInstance: Boolean;
    FExeNameAsIdentifier: Boolean;
    FShowMessage: Boolean;
    FOnShowMessage: TabfOneInstanceShowMessage;
  protected
    FMessage: string;
    FIdentifier: string;
    FTerminateApplication: Boolean;
    procedure Loaded; override;
    procedure DoActivatePrevInstance; dynamic;
    procedure DoShowMessage; dynamic;
  public
    constructor Create(AOwner: TComponent); override;
    function AlreadyRun: Boolean; virtual;
    function Check: Boolean; virtual;
  published
  // Properties
    property About;
    property ActivatePrevInstance: Boolean read FActivatePrevInstance
      write FActivatePrevInstance default True;
    property ExeNameAsIdentifier: Boolean read FExeNameAsIdentifier
      write FExeNameAsIdentifier default False;
    property Message: string read FMessage write FMessage;
    property Identifier: string read FIdentifier write FIdentifier;
    property ShowMessage: Boolean read FShowMessage write FShowMessage
      default False;
  // Events
    property OnShowMessage: TabfOneInstanceShowMessage read FOnShowMessage
      write FOnShowMessage;
  end;{TabfOneInstance = class(TabfComponent)}


//==============================================================================
// TabfAutoRun
//==============================================================================
// Component allows create applications that automatically run at the system
// start-up. You can register and unregister autorun execution for any
// application using this component.

  TabfAutoRun = class(TabfComponent)
  private
    FAutoRun: Boolean;
    FFileName: TFileName;
    FKind: TabfAutoExecKind;
    procedure SetAutoRun(A: Boolean);
    procedure SetFileName(const A: TFileName);
    procedure SetKind(A: TabfAutoExecKind);
  protected
    procedure Loaded; override;
  public
    constructor Create(AOwner: TComponent); override;
    procedure Register; virtual;
    procedure UnRegister; virtual;
  published
    property About;
    property AutoRun: Boolean read FAutoRun write SetAutoRun default False;
    property FileName: TFileName read FFileName write SetFileName;
    property Kind: TabfAutoExecKind read FKind write SetKind
      default aekMachineRun;
  end;{TabfAutoRun = class(TabfComponent)}


//==============================================================================
//  TabfShutdown
//==============================================================================
// Use TabfShutdown to precess PowerOff, Shutdown, Reboot, Logoff, Suspend or
// Hibernate action. The Force property determines forced suspension. If True,
// the Execute function sends a PBT_APMSUSPEND message to each application and
// driver, then immediately suspends operation. If False, sends a
// PBT_APMQUERYSUSPEND message to each application to request permission to
// suspend operation.

  TabfShutdownActionType = (aatPowerOff, aatShutdown, aatReboot, aatLogOff,
    aatSuspend, aatHibernate);

  TabfQueryShutdownEvent = procedure(Sender: TObject;
    var CanShutdown: Boolean) of object;

  TabfShutdown = class(TabfComponent)
  private
    FActionType: TabfShutdownActionType;
    FForce: Boolean;
    FOnQueryShutdown: TabfQueryShutdownEvent;
  protected
    procedure DoQueryShutdown(var CanShutdown: Boolean); virtual;
  public
    constructor Create(AOwner: TComponent); override;
    function Execute: Boolean; virtual;
  published
  // Properties
    property About;
    property ActionType: TabfShutdownActionType read FActionType
      write FActionType default aatPowerOff;
    property Force: Boolean read FForce write FForce default False;
  // Events
    property OnQueryShutdown: TabfQueryShutdownEvent read FOnQueryShutdown
      write FOnQueryShutdown;
  end;


//==============================================================================
// TabfWav
//==============================================================================
// Component for playing standard Wave (*.WAV) files or resources. Can play
// sounds form file on disk or from resource. Has ability store wave data
// in the *.dfm file.

  TabfWavPlayFrom = (pfFile, pfResource, pfDFM, pfSystemEvent);

  TabfWav = class(TabfCustomFileStorage)
  private
    FAsyncPlay: Boolean;
    FLooped: Boolean;
    FNoDefaultSound: Boolean;
    FNoStopSound: Boolean;
    FPlayFrom: TabfWavPlayFrom;
    FResourceName: string;
    FOnPlayAfter: TNotifyEvent;
    FOnPlayBefore: TNotifyEvent;
    FNoWaitIfBusy: Boolean;
    FEventAlias: string;
  // Properties stored flags
    function IsEventAliasStored: Boolean;
    function IsFileNameStored: Boolean;
    function IsResourceNameStored: Boolean;
  protected
    FPlaying: Boolean;
    FSoundPointer: PChar;
    FSoundOptions: DWORD;
    FSoundModule: HMODULE;
    procedure UpdateSoundOptions; virtual;
  // Properties Get/Set
    procedure SetAsyncPlay(Value: Boolean); virtual;
    procedure SetEventAlias(const Value: string); virtual;
    procedure SetFileName(const Value: TFileName); override;
    procedure SetLooped(Value: Boolean); virtual;
    procedure SetNoWaitIfBusy(Value: Boolean); virtual;
    procedure SetPlayFrom(Value: TabfWavPlayFrom); virtual;
    procedure SetResourceName(const Value: string); virtual;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
  // Wave routines
    procedure Play; virtual;
    procedure Stop; virtual;
  // Properties
    property Playing: Boolean read FPlaying;
  published
  // Properties
    property About;
    property AsyncPlay: Boolean read FAsyncPlay write SetAsyncPlay default True;
    property DataSize;
    property EventAlias: string read FEventAlias write SetEventAlias
      stored IsEventAliasStored;
    property FileName: TFileName read FFileName write SetFileName
      stored IsFileNameStored;
    property Looped: Boolean read FLooped write SetLooped default False;
    property NoDefaultSound: Boolean read FNoDefaultSound write FNoDefaultSound
      default True;
    property NoStopSound: Boolean read FNoStopSound write FNoStopSound
      default False;
    property NoWaitIfBusy: Boolean read FNoWaitIfBusy write SetNoWaitIfBusy
      default True;
    property PlayFrom: TabfWavPlayFrom read FPlayFrom write SetPlayFrom
      default Low(TabfWavPlayFrom);
    property ResourceName: string read FResourceName write SetResourceName
      stored IsResourceNameStored;
  // Events
    property OnPlayAfter: TNotifyEvent read FOnPlayAfter write FOnPlayAfter;
    property OnPlayBefore: TNotifyEvent read FOnPlayBefore write FOnPlayBefore;
  end;{TabfWav = class(TabfCustomFileStorage)}


//==============================================================================
// TabfCustomFolderMonitor
//==============================================================================
// Prototype of folder changes notifier

  TFolderMonitorFilter = (fmfFileNameChange, fmfDirNameChange,
    fmfAttributeChange, fmfSizeChange, fmfWriteChange, fmfSecurityChange);
  TFolderMonitorFilters = set of TFolderMonitorFilter;

  TabfCustomFolderMonitor = class(TabfComponent)
  private
    FActive: Boolean;
    FFolder: string;
    FFilters: TFolderMonitorFilters;
    FWatchSubTree: Boolean;
    FOnChange: TThreadMethod;
    function GetNotifyOptionFlags: DWORD;
  // Properties Get/Set
    procedure SetActive(Value: Boolean);
    procedure SetFilters(Value: TFolderMonitorFilters);
    procedure SetFolder(const Value: string);
    procedure SetWatchSubTree(Value: Boolean);
    procedure SetOnChange(Value: TThreadMethod);
  protected
    FThread: TabfFolderMonitorThread;
    procedure Loaded; override;
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    procedure Change; virtual;    
    procedure Start; virtual;
    procedure Stop; virtual;
  // Properties
    property Active: Boolean read FActive write SetActive default False;
    property NotifyFilters: TFolderMonitorFilters read FFilters write SetFilters;
    property Folder: string read FFolder write SetFolder;
    property WatchSubTree: Boolean read FWatchSubTree write SetWatchSubTree;
  // Events
    property OnChange: TThreadMethod read FOnChange write SetOnChange;
  end;


//==============================================================================
// TabfFolderMonitor
//==============================================================================
// Folder changes notifier

  TabfFolderMonitor = class(TabfCustomFolderMonitor)
  published
  // Properties
    property About;
    property Active;
    property Folder;
    property NotifyFilters;
    property WatchSubTree;
  // Events
    property OnChange;
  end;


//==============================================================================
// TabfCustomRegistryMonitor
//==============================================================================
// Prototype of registry changes notifier

  TabfRegistryMonitorFilter = (rmfSubTreeChange, rmfAttributeChange,
    rmfValueChange, rmfSecurityChange);
  TabfRegistryMonitorFilters = set of TabfRegistryMonitorFilter;

  TabfCustomRegistryMonitor = class(TabfComponent)
  private
    FActive: Boolean;
    FFilters: TabfRegistryMonitorFilters;
    FWatchSubTree: Boolean;
    FOnChange: TThreadMethod;
    function GetNotifyOptionFlags: DWORD;
    function GetRootKey: HKEY;
  // Properties Get/Set
    procedure SetActive(Value: Boolean);
    procedure SetFilters(Value: TabfRegistryMonitorFilters);
    procedure SetRegistryKey(const Value: string);
    procedure SetRootKey(Value: TabfRegRootKey);
    procedure SetWatchSubTree(Value: Boolean);
    procedure SetOnChange(Value: TThreadMethod);
  protected
    FThread: TabfRegistryMonitorThread;
    FRegistryKey: string;
    FRootKey: TabfRegRootKey;
    procedure Loaded; override;
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    procedure Change; virtual;
    procedure Start; virtual;
    procedure Stop; virtual;
  // Properties
    property Active: Boolean read FActive write SetActive default False;
    property NotifyFilters: TabfRegistryMonitorFilters read FFilters write SetFilters;
    property RegistryKey: string read FRegistryKey write SetRegistryKey;
    property RootKey: TabfRegRootKey read FRootKey write SetRootKey default rrkCurrentUser;
    property WatchSubTree: Boolean read FWatchSubTree write SetWatchSubTree;
  // Events
    property OnChange: TThreadMethod read FOnChange write SetOnChange;
  end;


//==============================================================================
// TabfFolderMonitor
//==============================================================================
// Folder changes notifier

  TabfRegistryMonitor = class(TabfCustomRegistryMonitor)
  published
  // Properties
    property About;
    property Active;
    property RegistryKey;
    property RootKey;
    property NotifyFilters;
    property WatchSubTree;
  // Events
    property OnChange;
  end;

{******************************************************************************}
implementation
