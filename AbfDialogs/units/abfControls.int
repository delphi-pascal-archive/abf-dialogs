{*******************************************************************************

  ABF Visual Components Library

  Copyright (c) 2000-2005 ABF software, Inc.
  All Rights Reserved.

  e-mail: info@abf-dev.com
  web:    http://www.abf-dev.com

  The entire contents of this file is protected by International Copyright
Laws. Unauthorized reproduction, reverse engineering, and distribution of all
or any portion of the code contained in this file is strictly prohibited and
may result in severe civil and criminal penalties and will be prosecuted to
the maximum extent possible under the law.

  RESTRICTIONS

  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY
PORTION OF ITS CONTENTS SHALL AT NO TIME BE COPIED, TRANSFERRED, SOLD,
DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS
WRITTEN CONSENT AND PERMISSION FROM THE ABF SOFTWARE, INC.

  CONSULT THE end USER LICENSE AGREEMENT (EULA) FOR INFORMATION ON ADDITIONAL
RESTRICTIONS.

*******************************************************************************}
unit abfControls;

{$I abf.inc}

interface

uses
{$IfDef D7}
  Themes,
{$EndIf D7}
{$IfDef D4}
  ImgList,
{$EndIf D4}
  Windows, Classes, Controls, SysUtils, Messages, Graphics, Forms,
  ExtCtrls, StdCtrls, ComCtrls,
// ABF VCL
  abfClasses, abfSysUtils, abfComponents, abfPropertyDesc;

type

//==============================================================================
// TabfCustomControl
//==============================================================================
// Base class of all ABF custom controls. Provides About propery.

  TabfCustomControl = class(TCustomControl)
  private
    FAbout: string;
  protected
    property About: string read FAbout write FAbout stored False;
  end;


//==============================================================================
// TabfGraphicControl
//==============================================================================
// Base class of all ABF graphic controls. Provides About propery.

  TabfGraphicControl = class(TGraphicControl)
  private
    FAbout: string;
  protected
    property About: string read FAbout write FAbout stored False;
  end;


//==============================================================================
// TabfCustomEdit
//==============================================================================
// Prototype of enhanced edits. Supports Flat style and Alignment.
// Note: PasswordChar is working when Alignment = taLeftJustify only!

  EabfEdit = class(Exception);

  TabfCustomEdit = class(TCustomEdit)
  private
    FAbout: string;
    FAlignment: TAlignment;
    FFlat: Boolean;
    FFocusBorder: Boolean;
    procedure DrawControlBorder(DC: HDC);
    function IsControlBorderVisible: Boolean;
  // Color swapping
    procedure RestoreColors;
    procedure SaveColors;
  // Messages
    procedure WMPaint(var Message: TWMPaint); message WM_PAINT;
    procedure WMNCPaint(var Message: TMessage); message WM_NCPAINT;
    procedure CMEnabledChanged(var Message: TMessage); message CM_ENABLEDCHANGED;
    procedure CMEnter(var Message: TCMEnter); message CM_ENTER;
    procedure CMExit(var Message: TCMExit); message CM_EXIT;
    procedure CMMouseEnter(var Message: TMessage); message CM_MOUSEENTER;
    procedure CMMouseLeave(var Message: TMessage); message CM_MOUSELEAVE;
  protected
  // Flags and temporary storages
    FMouseInControl: Boolean;
    FPrevColor: TColor;
    FPrevParentColor: Boolean;
//    FPainting: Boolean;
    procedure CreateParams(var Params: TCreateParams); override;
    procedure CreateWnd; override;
    procedure Change; override;
    procedure KeyPress(var Key: Char); override;
    procedure DrawFlat(DC: HDC); virtual;
    procedure UpdateNonClientArea; virtual;
  // Properties Get/Set
    procedure SetAlignment(Value: TAlignment); virtual;
    procedure SetFlat(Value: Boolean); virtual;
    procedure SetFocusBorder(Value: Boolean); virtual;
  // Properies
    property About: string read FAbout write FAbout stored False;
  public
    constructor Create(AOwner: TComponent); override;
    procedure Update; override;
  // Properties
    property Alignment: TAlignment read FAlignment write SetAlignment
      default taLeftJustify;
    property Flat: Boolean read FFlat write SetFlat default False;
    property FocusBorder: Boolean read FFocusBorder write SetFocusBorder
      default True;
  end;{TabfCustomEdit = class(TCustomEdit)}


//==============================================================================
// TabfEdit
//==============================================================================
// Enhanced edit control.  Supports Flat style and Alignment.
// Note: PasswordChar is working when Alignment = taLeftJustify only!

  TabfEdit = class(TabfCustomEdit)
  published
    property About;
    property Alignment;
    property Flat;
    property FocusBorder;
  // TEdit parts
    property AutoSelect;
    property AutoSize;
    property BorderStyle;
    property CharCase;
    property Color;
    property Ctl3D;
    property DragCursor;
    property Enabled;
    property Font;
    property HideSelection;
    property MaxLength;
    property OEMConvert;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PasswordChar;
    property PopupMenu;
    property ReadOnly;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property Text;
    property Visible;
    property OnChange;
    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
{$IfDef D3}
    property DragMode;
    property ImeMode;
    property ImeName;
    property OnEndDrag;
    property OnStartDrag;
{$EndIf D3}
{$IfDef D4}
    property Anchors;
    property BiDiMode;
    property Constraints;
    property DragKind;
    property ParentBiDiMode;
    property OnEndDock;
    property OnStartDock;
{$EndIf D4}
{$IfDef D5}
    property OnContextPopup;
{$EndIf D5}
{$IfDef D6}
    property BevelEdges;
    property BevelInner;
    property BevelKind default bkNone;
    property BevelOuter;
{$EndIf D6}
  end;{TabfEdit = class(TabfCustomEdit)}


//==============================================================================
// TabfCustomComboBox
//==============================================================================
// A prototype of combobox controls with enhanced abilities.

  TabfComboBoxListAlign = (clsRigth, claLeft);

  TabfCustomComboBox = class(TCustomComboBox)
  private
    FAbout: string;
    FFlat: Boolean;
    FEtched: Boolean;
    FFocusBorder: Boolean;
    FItemHeightChanging: Boolean;
    FListAlign: TabfComboBoxListAlign;
    FListWidth: Integer;
    FImageListAsIcon: Boolean;
{$IfNDef D6}
    FLastTime: Cardinal;
    FAutoComplete: Boolean;
    FAutoDropDown: Boolean;
    FFilter: string;
    FOnSelect: TNotifyEvent;
{$EndIf D6}
  // Drawing routines
    procedure DrawButtonFlat(DC: HDC);
    procedure DrawButtonBorder(DC: HDC);
    procedure DrawControlBorder(DC: HDC);
    function IsControlBorderVisible: Boolean;
    function IsButtonBorderVisible: Boolean;
  // Notifying routines
    procedure ImageListChange(Sender: TObject);
  // Color swapping
    procedure SaveColors;
    procedure RestoreColors;
  // Properties Get/Set
    function GetListWidth: Integer;
    procedure SetListWidth(Value: Integer);
    procedure SetImageListAsIcon(Value: Boolean);
  // Messages routines
    procedure WMPaint(var Message: TWMPaint); message WM_PAINT;
    procedure WMNCPaint(var Message: TMessage); message WM_NCPAINT;
    procedure CMEnabledChanged(var Message: TMessage); message CM_ENABLEDCHANGED;
    procedure CMEnter(var Message: TCMEnter); message CM_ENTER;
    procedure CMExit(var Message: TCMExit); message CM_EXIT;
    procedure CMMouseEnter(var Message: TMessage); message CM_MOUSEENTER;
    procedure CMMouseLeave(var Message: TMessage); message CM_MOUSELEAVE;
    procedure CMWinIniChange(var Message: TWMWinIniChange); message CM_WININICHANGE;
    procedure CMFontChanged(var Message: TMessage); message CM_FONTCHANGED;
{$IfDef D3}
    procedure CMRecreateWnd(var Message: TMessage); message CM_RECREATEWND;
{$EndIf D3}
    procedure CNCommand(var Message: TWMCommand); message CN_COMMAND;
    procedure CNDrawItem(var Message: TWMDrawItem); message CN_DRAWITEM;
    procedure CNMeasureItem(var Message: TWMMeasureItem); message CN_MEASUREITEM;
  protected
    FImageIcon: TIcon;
    FImageListChangeLink: TChangeLink;
    FImageList: TImageList;
  // Flags and temporary storages
    FMouseInControl: Boolean;
    FPrevColor: TColor;
    FPrevParentColor: Boolean;
    procedure CreateParams(var Params: TCreateParams); override;
    procedure Loaded; override;
    procedure Notification(AComponent: TComponent;
      Operation: TOperation); override;
    procedure UpdateItemHeight; virtual;
{$IfNDef D6}
    function SelectItem(const AnItem: string): Boolean;
    procedure KeyPress(var Key: Char); override;
    procedure Select; dynamic;
{$EndIf D6}
  // Button routines
    function GetButtonWidth: Integer; virtual;
    function GetButtonRect: TRect; virtual;
  // Drawing routines
    procedure DrawItem(Index: Integer; ARect: TRect;
      State: TOwnerDrawState); override;
    procedure DrawFlat(DC: HDC); virtual;
    procedure UpdateNonClientArea; virtual;
  // Properties Get/Set
    procedure SetEtched(A: Boolean); virtual;
    procedure SetFlat(A: Boolean); virtual;
    procedure SetFocusBorder(A: Boolean); virtual;
    procedure SetImageList(const A: TImageList); virtual;
    function GetMinItemHeight: Integer; virtual;
  // Properties
    property About: string read FAbout write FAbout stored False;
{$IfNDef D6}
    property OnSelect: TNotifyEvent read FOnSelect write FOnSelect;
{$EndIf D6}
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  // Properties
    property Etched: Boolean read FEtched write SetEtched default False;
    property Flat: Boolean read FFlat write SetFlat default False;
    property FocusBorder: Boolean read FFocusBorder write SetFocusBorder
      default True;
    property ImageList: TImageList read FImageList write SetImageList;
    property ImageListAsIcon: Boolean read FImageListAsIcon
      write SetImageListAsIcon default True;
    property ItemIndex default -1;
    property ListWidth: Integer read GetListWidth write SetListWidth default 0;
//    property ListAlign: TabfComboBoxListAlign read FListAlign write FListAlign
//      default clsRigth;
    property MinItemHeight: Integer read GetMinItemHeight;
{$IfDef D6}
    property AutoComplete default True;
    property AutoDropDown default False;
    property BevelKind default bkNone;
{$Else D6}
    property AutoComplete: Boolean read FAutoComplete write FAutoComplete
      default True;
    property AutoDropDown: Boolean read FAutoDropDown write FAutoDropDown
      default False;
{$EndIf D6}
  end;{TabfCustomComboBox = class(TCustomComboBox)}


//==============================================================================
// TabfComboBox
//==============================================================================
// An enhanced combobox control with Flat, Eatched and FocusBorder abilities.

  TabfComboBox = class(TabfCustomComboBox)
  published
  // Properties
    property About;
    property AutoComplete;
    property AutoDropDown;
    property Color;
    property Ctl3D;
    property DragCursor;
    property DragMode;
    property DropDownCount;
    property Enabled;
    property Etched;
    property Flat;
    property FocusBorder;
    property Font;
    property ImageList;
    property ImageListAsIcon;
    property ItemHeight;
    property ItemIndex;
    property ListWidth;
    property MaxLength;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property Style; // Must be streamed before Items
    property ShowHint;
    property Sorted;
    property TabOrder;
    property TabStop;
    property Text;
    property Visible;
{$IfDef D3}
    property ImeMode;
    property ImeName;
{$EndIf D3}
{$IfDef D4}
    property Anchors;
    property BiDiMode;
    property CharCase;
    property Constraints;
    property DragKind;
    property ParentBiDiMode;
{$EndIf D4}
{$IfDef D6}
    property Action;
    property BevelEdges;
    property BevelInner;
    property BevelKind;
    property BevelOuter;
{$EndIf D6}
  // Events
    property OnChange;
    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnDrawItem;
    property OnDropDown;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMeasureItem;
    property OnStartDrag;
    property OnSelect;
{$IfDef D4}
    property OnEndDock;
    property OnStartDock;
{$EndIf D4}
{$IfDef D5}
    property OnContextPopup;
{$EndIf D5}
{$IfDef D6}
    property OnCloseUp;
{$EndIf D6}
  // Properties
    property Items; // Must be streamed after OnMeasureItem
  end;{TabfComboBox = class(TabfCustomComboBox)}


//==============================================================================
// TabfCustomImageListBox
//==============================================================================
// Prototype of listbox with imageges.

  TabfImageLayout = StdCtrls.TTextLayout;

  TabfCustomImageListBox = class(TCustomListBox)
  private
    FAbout: string;
    FImageLayout: TabfImageLayout;
    FImageIndexByObject: Boolean;
    FMargin: Integer;
    FSpacing: Integer;
    FHideSelection: Boolean;
    FImageListAsIcon: Boolean;
  // Notifying routines
    procedure ImageListChange(Sender: TObject);
  // Properties Get/Set
    procedure SetHideSelection(Value: Boolean);
    procedure SetImageIndexByObject(Value: Boolean);
    procedure SetImageLayout(Value: TabfImageLayout);
    procedure SetImageList(const Value: TImageList);
    procedure SetImageListAsIcon(Value: Boolean);
    procedure SetMargin(Value: Integer);
    procedure SetSpacing(Value: Integer);
  // Messages
    procedure CNDrawItem(var Message: TWMDrawItem); message CN_DRAWITEM;
    procedure CMWinIniChange(var Message: TWMWinIniChange); message CM_WININICHANGE;
    procedure CMFontChanged(var Message: TMessage); message CM_FONTCHANGED;
  protected
    FImageList: TImageList;
    FImageListChangeLink: TChangeLink;
    FImageIcon: TIcon;
    procedure Notification(AComponent: TComponent;
      Operation: TOperation); override;
    function GetRealImageIndex(AItemIndex: Integer): Integer; virtual;
    procedure DrawItem(Index: Integer; ARect: TRect;
      State: TOwnerDrawState); override;
    procedure MeasureItem(Index: Integer; var Height: Integer); override;
  // Properties
    property About: string read FAbout write FAbout stored False;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  // Properties
    property HideSelection: Boolean read FHideSelection write SetHideSelection
      default False;
    property ImageIndexByObject: Boolean read FImageIndexByObject
      write SetImageIndexByObject default False;
    property ImageLayout: TabfImageLayout read FImageLayout
      write SetImageLayout default tlCenter;
    property ImageList: TImageList read FImageList write SetImageList;
    property ImageListAsIcon: Boolean read FImageListAsIcon
      write SetImageListAsIcon default True;
    property Margin: Integer read FMargin write SetMargin default 2;
    property Spacing: Integer read FSpacing write SetSpacing default 4;
  end;


//==============================================================================
// TabfImageListBox
//==============================================================================
// Enhanced listbox with imageges. Has only one column and wraps text of
// each item

  TabfImageListBox = class(TabfCustomImageListBox)
  published
  // Properties
    property About;
    property HideSelection;
    property ImageList;
    property ImageIndexByObject;
    property ImageLayout;
    property ImageListAsIcon;
    property Margin;
    property Spacing;
    // Inherited
    property Align;
    property BorderStyle;
    property Color;
    property Ctl3D;
    property DragCursor;
    property DragMode;
    property Enabled;
    property ExtendedSelect;
    property Font;
    property ImeMode;
    property ImeName;
//    property IntegralHeight;
//    property ItemHeight;
    property Items;
    property MultiSelect;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property Sorted;
    property TabOrder;
    property TabStop;
    property TabWidth;
    property Visible;
{$IfDef D4}
    property Anchors;
    property BevelEdges;
    property BevelInner;
    property BevelKind default bkNone;
    property BevelOuter;
    property BiDiMode;
    property Constraints;
    property DragKind;
    property ParentBiDiMode;
{$EndIf D4}
{$IfDef D6}
    property AutoComplete;
    property ScrollWidth;
{$EndIf D6}
  // Events
    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnDrawItem;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMeasureItem;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnStartDrag;
{$IfDef D4}
    property OnEndDock;
    property OnStartDock;
{$EndIf D4}
{$IfDef D5}
    property OnContextPopup;
{$EndIf D5}
  end;


//==============================================================================
// TabfCustomImage
//==============================================================================
// Prototype of enhanced image controls.

  TabfCustomImage = class(TImage)
  private
    FAbout: string;
    FOldPictureChanged: TNotifyEvent;
    FCaptionWhenEmpty: Boolean;
    FCaptionVisible: Boolean;
    FImageIndex: TImageIndex;
    FImageListChangeLink: TChangeLink;
    FImageListAsIcon: Boolean;
{$IfNDef D6}
    FProportional: Boolean;
{$EndIf D6}
    function IsPictureStored: Boolean;
  // Properties Get/Set
    procedure SetCaptionVisible(Value: Boolean);
    procedure SetCaptionWhenEmpty(Value: Boolean);
    procedure SetImageList(const Value: TImageList);
    procedure SetImageListAsIcon(Value: Boolean);
    procedure SetImageIndex(Value: TImageIndex);
{$IfNDef D6}
    procedure SetProportional(Value: Boolean);
{$EndIf D6}
  // Messages
    procedure CMTextChanged(var Message: TMessage); message CM_TEXTCHANGED;
  protected
    FImageList: TImageList;
    procedure Notification(AComponent: TComponent;
      Operation: TOperation); override;
    function DestRect: TRect; virtual;
    procedure SetPictureFromImageList; virtual;
    procedure PictureChanged(Sender: TObject); virtual;
    procedure ImageListChange(Sender: TObject); virtual;
  // Properties Get/Set
    function GetRealCanvas: TCanvas; virtual;
  // Properties
    property About: string read FAbout write FAbout stored False;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure Paint; override;
  // Properties
    property Caption;
    property CaptionVisible: Boolean read FCaptionVisible
      write SetCaptionVisible default False;
    property CaptionWhenEmpty: Boolean read FCaptionWhenEmpty
      write SetCaptionWhenEmpty default True;
    property Font;
    property ImageList: TImageList read FImageList write SetImageList;
    property ImageListAsIcon: Boolean read FImageListAsIcon
      write SetImageListAsIcon default True;
    property ImageIndex: TImageIndex read FImageIndex write SetImageIndex
      default 0;
    property ParentFont;
    property RealCanvas: TCanvas read GetRealCanvas;
{$IfNDef D6}
    property Proportional: Boolean read FProportional write SetProportional
      default False;
{$EndIf D6}
  published
    property Picture stored IsPictureStored;
  end;{TabfCustomImage = class(TImage)}


//==============================================================================
// TabfImage
//==============================================================================
// Enhanced image controls.

  TabfImage = class(TabfCustomImage)
  published
  // Properies
    property About;
    property Caption;
    property CaptionVisible;
    property CaptionWhenEmpty;
    property Font;
    property ImageList;
    property ImageListAsIcon;
    property ImageIndex;
    property ParentFont;
{$IfNDef D6}
    property Proportional;
{$EndIf D6}
  end;


//==============================================================================
// TabfCustomGroupBox
//==============================================================================
// Prototype of enhanced group box controls. Can have a check box in caption.

  TabfCustomGroupBox = class(TCustomGroupBox)
  private
    FAbout: string;
    FOnCheckBoxClick: TNotifyEvent;
    FAutoDisableControls: Boolean;
  // Properties Get/Set
    procedure SetAutoDisableControls(Value: Boolean);
    function GetCheckBoxChecked: Boolean;
    procedure SetCheckBoxChecked(Value: Boolean);
    function GetCheckBoxVisible: Boolean;
    procedure SetCheckBoxVisible(Value: Boolean);
  // Messages
    procedure CMTextChanged(var Message: TMessage); message CM_TEXTCHANGED;
  protected
    FCheckBox: TCheckBox;
    procedure Paint; override;
    function GetCheckBoxSize: TSize; virtual;
    procedure UpdateCheckBox; virtual;
    procedure UpdateControls; virtual;
    procedure CheckBoxClickEvent(Sender: TObject); virtual;
  // Properties
    property About: string read FAbout write FAbout stored False;
  // Events
    property OnCheckBoxClick: TNotifyEvent read FOnCheckBoxClick
      write FOnCheckBoxClick;
  public
    constructor Create(AOwner: TComponent); override;
    procedure Update; override;
  // Properties
    property AutoDisableControls: Boolean read FAutoDisableControls
      write SetAutoDisableControls default True;
    property CheckBox: TCheckBox read FCheckBox;
    property CheckBoxChecked: Boolean read GetCheckBoxChecked
      write SetCheckBoxChecked default True;
    property CheckBoxVisible: Boolean read GetCheckBoxVisible
      write SetCheckBoxVisible default True;
  end;


//==============================================================================
// TabfGroupBox
//==============================================================================
// Enhanced group box control. Can have a check box in caption.

  TabfGroupBox = class(TabfCustomGroupBox)
  published
  // Properties
    property About;
    property Align;
    property AutoDisableControls;
    property Caption;
    property Color;
    property CheckBoxChecked;
    property CheckBoxVisible;
    property Ctl3D;
    property DragCursor;
    property DragMode;
    property Enabled;
    property Font;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property Visible;
{$IfDef D4}
    property Anchors;
    property BiDiMode;
    property Constraints;
    property DockSite;
    property DragKind;
    property ParentBiDiMode;
{$EndIf D4}
  // Events
    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnStartDrag;
    property OnCheckBoxClick;
{$IfDef D4}
    property OnGetSiteInfo;
    property OnDockDrop;
    property OnDockOver;
    property OnEndDock;
    property OnStartDock;
    property OnUnDock;
{$EndIf D4}
{$IfDef D5}
    property OnContextPopup;
{$EndIf D5}
  end;


//==============================================================================
// TabfCustomScrollBar
//==============================================================================
// Prototype of transparent sctroll bar

  TabfCustomScrollBar = class(TabfGraphicControl)
  private
    FAddSize: Integer;
    FAutoSize: Boolean;
    FHideButtons: Boolean;
    FKind: TScrollBarKind;
    FMargin: Integer;
    FMax: Integer;
    FMin: Integer;
    FPosition: Integer;
    FOnChange: TNotifyEvent;
  // Properties Get/Set
    procedure SetKind(Value: TScrollBarKind);
    procedure SetHideButtons(Value: Boolean);
    procedure SetMargin(Value: Integer);
    procedure SetMax(Value: Integer);
    procedure SetMin(Value: Integer);
    procedure SetPosition(Value: Integer);
    function  GetTimerInterval: Cardinal;
    procedure SetTimerInterval(Value: Cardinal);
    function  GetTransparent: Boolean;
    procedure SetTransparent(Value: Boolean);
  // Messages
    procedure CMWinIniChange(var Message: TWMWinIniChange); message CM_WININICHANGE;
    procedure WMSize(var Message: TWMSize); message WM_SIZE;
  protected
    FTimer: TabfCustomTimer;
    FButtonsDown: Boolean;
    FActiveButtonDown: Boolean;
    procedure Loaded; override;
    procedure Paint; override;
    procedure InitAutoSize; virtual;
    function GetButtonRect(First: Boolean): TRect; virtual;
    procedure DrawButton(First: Boolean; Down: Boolean); virtual;
    function DoPosition: Boolean; virtual;
    procedure OnTimer(Sender: TObject); virtual;
  // Event handlers
    procedure MouseMove(Shift: TShiftState; X, Y: Integer); override;
    procedure MouseDown(Button: TMouseButton; Shift: TShiftState;
      X, Y: Integer); override;
    procedure MouseUp(Button: TMouseButton; Shift: TShiftState;
      X, Y: Integer); override;
  // Properties Get/Set
    procedure SetAutoSize(Value: Boolean);{$IfDef D6}reintroduce;{$EndIf}virtual;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  // Properties
    property AutoSize: Boolean read FAutoSize write SetAutoSize;
    property HideButtons: Boolean read FHideButtons write SetHideButtons
      default True;
    property Kind: TScrollBarKind read FKind write SetKind;
    property Margin: Integer read FMargin write SetMargin default 0;
    property Max: Integer read FMax write SetMax;
    property Min: Integer read FMin write SetMin;
    property Position: Integer read FPosition write SetPosition;
    property TimerInterval: Cardinal read GetTimerInterval
      write SetTimerInterval default 100;
    property Transparent: Boolean read GetTransparent write SetTransparent;
    property Align;
    property Color;
    property Hint;
    property ShowHint;
    property Visible;
    property ParentShowHint;
  // Events
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
  end;{TabfCustomScrollBar = class(TGraphicControl)}


//==============================================================================
// TabfScrollBar
//==============================================================================
// Transparent sctroll bar

  TabfScrollBar = class(TabfCustomScrollBar)
  published
  // Properties
    property About;
    property Align;
    property AutoSize;
    property Color;
    property HideButtons;
    property Hint;
    property Margin;
    property Max;
    property Min;
    property Kind;
    property Position;
    property ParentShowHint;
    property ShowHint;
    property TimerInterval;
    property Transparent;
    property Visible;
  // Events
    property OnChange;
    property OnClick;
    property OnDblClick;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
  end;



//==============================================================================
// TabfCustomDatePanel
//==============================================================================
// Prototype of complex panel for input or output a Date.

  TabfDatePanelLayout = (dplSystemDefault, dplDMY, dplMDY, dplYMD, dplYDM);

  TabfCustomDatePanel = class(TCustomPanel)
  private
    FAbout: string;
    FControlsSpace: Integer;
    FMonth: Integer;
    FEditDay: Boolean;
    FEditMonth: Boolean;
    FEditYear: Boolean;
    FAlreadyInitControls: Boolean;
    FIgnoreOnChange: Boolean;
    FIgnoreUpdateControls: Boolean;
    FOnChange: TNotifyEvent;
    FOnChangeDate: TNotifyEvent;
    FOnChangeYear: TNotifyEvent;
    FOnChangeDay: TNotifyEvent;
    FOnChangeMonth: TNotifyEvent;
    FOnClickMonth: TNotifyEvent;
    FOnKeyPressDay: TKeyPressEvent;
    FOnKeyPressYear: TKeyPressEvent;
  // Properties Get/Set
    function GetDay: Integer;
    procedure SetDay(Value: Integer);
    procedure SetMonth(Value: Integer);
    function GetYear: Integer;
    procedure SetYear(Value: Integer);
    function GetEtched: Boolean;
    procedure SetEtched(Value: Boolean);
    function GetFocusBorder: Boolean;
    procedure SetFlat(Value: Boolean);
    function GetFlat: Boolean;
    procedure SetFocusBorder(Value: Boolean);
    function GetMonthName: string;
    function GetMonthNames: TStrings;
    procedure SetMonthNames(const Value: TStrings);
    procedure SetEditDay(Value: Boolean);
    procedure SetEditMonth(Value: Boolean);
    procedure SetEditYear(Value: Boolean);
  // Messages Routine
    procedure CMWinIniChange(var Message: TWMWinIniChange); message CM_WININICHANGE;
    procedure CMEnabledChanged(var Message: TWMWinIniChange); message CM_ENABLEDCHANGED;
    procedure CMFontChanged(var Message: TMessage); message CM_FONTCHANGED;
    procedure WMPaint(var Message: TWMPaint); message WM_PAINT;
  protected
    FControlsLayout: TabfDatePanelLayout;
    FInternalControlsLayout: TabfDatePanelLayout;
  // Components
    FMonthEdit: TabfComboBox;
    FYearEdit: TabfEdit;
    FDayEdit: TabfEdit;
    FDayUpDown: TUpDown;
    FYearUpDown: TUpDown;
    procedure Loaded; override;
    procedure Resize; override;
    procedure InitMonthNames; virtual;
    procedure InitControls; virtual;
    procedure UpdateControls; virtual;
    procedure UpdateWidths; virtual;
    procedure HideShowControl(Control: TWinControl; AVisible: Boolean);
    procedure ValidateDay; virtual;
  // Event handlers
    procedure DoChange; virtual;
    procedure DoChangeDay(Sender: TObject); virtual;
    procedure DoChangeMonth(Sender: TObject); virtual;
    procedure DoChangeYear(Sender: TObject); virtual;
    procedure DoClickMonth(Sender: TObject); virtual;
    procedure DoKeyPressDay(Sender: TObject; var Key: Char); virtual;
    procedure DoKeyPressYear(Sender: TObject; var Key: Char); virtual;
  // Properties Get/Set
    procedure SetControlsLayout(Value: TabfDatePanelLayout); virtual;
    procedure SetControlsSpace(Value: Integer); virtual;
    function GetDate: TDate; virtual;
    procedure SetDate(Value: TDate); virtual;
  // Properies
    property About: string read FAbout write FAbout stored False;
    property Etched: Boolean read GetEtched write SetEtched default False;
    property Flat: Boolean read GetFlat write SetFlat default False;
    property FocusBorder: Boolean read GetFocusBorder write SetFocusBorder
      default True;
    property MonthNames: TStrings read GetMonthNames write SetMonthNames;
  // Events
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
    property OnChangeDate: TNotifyEvent read FOnChangeDate write FOnChangeDate;
    property OnChangeDay: TNotifyEvent read FOnChangeDay write FOnChangeDay;
    property OnChangeMonth: TNotifyEvent read FOnChangeMonth write
      FOnChangeMonth;
    property OnChangeYear: TNotifyEvent read FOnChangeYear write FOnChangeYear;
    property OnClickMonth: TNotifyEvent read FOnClickMonth write
      FOnClickMonth;
    property OnKeyPressDay: TKeyPressEvent read FOnKeyPressDay
      write FOnKeyPressDay;
    property OnKeyPressYear: TKeyPressEvent read FOnKeyPressYear
      write FOnKeyPressYear;
  public
    constructor Create(AOwner: TComponent); override;
  // Properies
    property ControlsLayout: TabfDatePanelLayout read FControlsLayout
      write SetControlsLayout default dplSystemDefault;
    property ControlsSpace: Integer read FControlsSpace write SetControlsSpace
      default 8;
    property Date: TDate read GetDate write SetDate;
    property Day: Integer read GetDay write SetDay stored False;
    property Month: Integer read FMonth write SetMonth stored False;
    property Year: Integer read GetYear write SetYear stored False;
    property MonthName: string read GetMonthName;
    property EditDay: Boolean read FEditDay write SetEditDay default True;
    property EditMonth: Boolean read FEditMonth write SetEditMonth default True;
    property EditYear: Boolean read FEditYear write SetEditYear default True;
  // Control aliases
    property DayEdit: TabfEdit read FDayEdit;
    property DayUpDown: TUpDown read FDayUpDown;
    property MonthEdit: TabfComboBox read FMonthEdit;
    property YearEdit: TabfEdit read FYearEdit;
    property YearUpDown: TUpDown read FYearUpDown;
  end;{TabfCustomDatePanel = Class(TPanel)}


//==============================================================================
// TabfDatePanel
//==============================================================================
// Useful complex panel for input or output a Date or a parts of Date.

  TabfDatePanel = class(TabfCustomDatePanel)
  published
    property About;
    property Align;
    property BorderWidth;
    property Color;
    property Ctl3D;
    property Date;
    property EditDay;
    property EditMonth;
    property EditYear;
    property Etched;
    property DragCursor;
    property DragMode;
    property Enabled;
    property Flat;
    property FocusBorder;
    property FullRepaint;
    property Font;
    property Locked;
    property MonthNames;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property Visible;
{$IfDef D4}
    property Anchors;
    property BiDiMode;
    property Constraints;
    property UseDockManager default True;
    property DockSite;
    property DragKind;
    property ParentBiDiMode;
{$EndIf D4}
  // Must be last !!!
    property ControlsSpace;
    property ControlsLayout;
  // Events
    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnResize;
    property OnStartDrag;
    property OnChange;
    property OnChangeDate;
    property OnChangeDay;
    property OnChangeMonth;
    property OnChangeYear;
    property OnClickMonth;
    property OnKeyPressDay;
    property OnKeyPressYear;
{$IfDef D4}
    property OnCanResize;
    property OnConstrainedResize;
    property OnDockDrop;
    property OnDockOver;
    property OnEndDock;
    property OnGetSiteInfo;
    property OnStartDock;
    property OnUnDock;
{$EndIf D4}
{$IfDef D5}
    property OnContextPopup;
{$EndIf D5}
  end;{TabfDatePanel = class(TabfCustomDatePanel)}


{******************************************************************************}
implementation
